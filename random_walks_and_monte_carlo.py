# -*- coding: utf-8 -*-
"""Random Walks and Monte Carlo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11MUn4dWRtSlWwzTnMvwPDY_SsVPO8WUH

# Random walk generation
"""

import numpy as np
import pandas as pd

def gbm(n_years=10, n_scenarios=1000, mu=0.07, sigma=0.15, steps_per_year=12, s_0=100.0):
  """
  Evolution of a stock price using a geometric brownian motion model
  """
  dt = 1 / steps_per_year # amount by which we should change the time
  n_steps = int(n_years * steps_per_year)
  xi = np.random.normal(size=(n_steps, n_scenarios)) 
  # xi is a random normal brownian motion. Every row is a new stock price and 
  # every column is one possible scenario
  rets = mu * dt + sigma * np.sqrt(dt) * xi
  rets = pd.DataFrame(rets)
  # convert returns to prices
  prices = s_0 * (1 + rets).cumprod()
  return prices

p = gbm(10, n_scenarios=3)
p.head()
p.plot()

p = gbm(n_years=10, n_scenarios=1000).plot(figsize=(12,6), legend=False)

def GBM(n_years=10, n_scenarios=1000, mu=0.07, sigma=0.15, steps_per_year=12, s_0=100.0):
  """
  Evolution of a stock price using a geometric brownian motion model
  """
  dt = 1 / steps_per_year # amount by which we should change the time
  n_steps = int(n_years * steps_per_year)
  rets_plus_one = np.random.normal(loc=(1+mu*dt), scale=(sigma * np.sqrt(dt)), size=(n_steps, n_scenarios))
  rets_plus_one[0] = 1 
  prices = s_0 * pd.DataFrame(rets_plus_one).cumprod()
  return prices

# Commented out IPython magic to ensure Python compatibility.
# %timeit gbm(n_years=5, n_scenarios=1000)

# Commented out IPython magic to ensure Python compatibility.
# %timeit GBM(n_years=5, n_scenarios=1000)

GBM(n_years=10, n_scenarios=20).plot(legend=False)

