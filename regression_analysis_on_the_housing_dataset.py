# -*- coding: utf-8 -*-
"""Regression Analysis on the housing dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xhIGNQHhms9Gm_1m_7rdMNwDHxRQkcbw

# Exploring the Housing dataset
"""

# LOADING THE DATA
import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/rasbt/python-machine-learning-book-3rd-edition/master/ch10/housing.data.txt",
                 header=None, sep='\s+')
df.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD',
              'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']
df.head()

"""The dataset is summarized below:

1. CRIM = Per capita crime rate by town
2. ZN = Proportion of residential land zoned for lots over 25,000
3. INDUS = Proportion of non-retail business acres per town
4. CHAS = Charles River dummy variable(=1 if tract bounds river)
5. NOX = Nitric oxide concentration
6. RM = Average number of rooms per dwelling
7. AGE = Proportion of owner-occupied units built prior to 1940
8. DIS = Weighted distances to five boston employment centers
9. RAD = Index of accessibility to radial highways
10. TAX = Full value property tax rate per $10000
11. PTRATIO = Pupil-teacher ratio by town

12. B = 1000(Bk-0.63)**2, where Bk is the proportion of African-American Descent by town
13. LSTAT = Percentage of lower status of the population
14. MEDV = Median value of owner-occupied homes in $1000s


### **EXPLORATORY DATA ANALYSIS**

"""

# Scatterplot matrix
import matplotlib.pyplot as plt
from mlxtend.plotting import scatterplotmatrix
cols = ['LSTAT', 'INDUS', 'NOX', 'RM', 'MEDV']
scatterplotmatrix(df[cols].values, figsize=(10,7), names=cols, alpha=0.5)
plt.tight_layout()
plt.show()

pip install mlxtend==0.17.3

# Correlation matrix
from mlxtend.plotting import heatmap
import numpy as np

cm = np.corrcoef(df[cols].values.T)
hm = heatmap(cm, row_names=cols, column_names=cols)
plt.show()

"""# Implementing an OLS linear regression model"""

class LinearRegressionGD(object):

  def __init__(self, eta=0.001, n_iter=20):
    self.eta = eta
    self.n_iter = n_iter

  def fit(self, X, y):
    self.w_ = np.zeros(1 + X.shape[1])
    self.cost_ = []

    for i in range(self.n_iter):
      output = self.net_input(X)
      errors = (y - output)
      self.w_[1:] += self.eta * X.T.dot(errors)
      self.w_[0] += self.eta * errors.sum()
      cost = (errors**2).sum() / 2.0
      self.cost_.append(cost)
    return self

  def net_input(self, X):
    return np.dot(X, self.w_[1:]) + self.w_[0]

  def predict(self, X):
    return self.net_input(X)

# Using the RM as the explanatory variable and train a model to predict MEDV
X = df[['RM']].values
y = df['MEDV'].values
from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
sc_y = StandardScaler()
X_std = sc_x.fit_transform(X)
y_std = sc_y.fit_transform(y[:, np.newaxis]).flatten()
# adding a new dimension to the array and flattening it
lr = LinearRegressionGD()
lr.fit(X_std, y_std)

# plotting the cost function
plt.plot(range(1, lr.n_iter+1), lr.cost_)
plt.ylabel('SSE')
plt.xlabel('Epoch')
plt.show()

def lin_regplot(X, y, model):
  plt.scatter(X, y, c='steelblue', edgecolor='white', s=70)
  plt.plot(X, model.predict(X), color='black', lw=2)
  return None

lin_regplot(X_std, y_std, lr)
plt.xlabel('Average Number of Rooms [RM] (standardized)')
plt.ylabel('Price in $1000s [MEDV] (standardized)')
plt.show()

# Scaling back to the original scale
num_rooms_std = sc_x.transform(np.array([[5.0]]))
price_std = lr.predict(num_rooms_std)
print('Price in $1000s: %.3f' % sc_y.inverse_transform(price_std))

"""In this code example, we used the previously trained LR model to predict the price of a house with five rooms. According to our model, such a house will be worth $10840."""

print('Slope: %.3f' % lr.w_[1])
print('Intercept: %.3f' % lr.w_[0])

"""### **Estimating the coefficient of a regression model via sklearn**"""

from sklearn.linear_model import LinearRegression
slr = LinearRegression()
slr.fit(X, y)
y_pred = slr.predict(X)
print('Slope: %.3f' % slr.coef_[0])
print('Intercept: %.3f' % slr.intercept_)

lin_regplot(X, y, slr)
plt.xlabel('Average Number of Rooms [RM] ')
plt.ylabel('Price in $1000s [MEDV]')
plt.show()

"""# Fitting a robust regression model using RANSAC"""

from sklearn.linear_model import RANSACRegressor
ransac = RANSACRegressor(LinearRegression(), max_trials=100, 
                         min_samples=50, loss='absolute_loss', 
                         residual_threshold=5.0, random_state=0)
ransac.fit(X, y)

inlier_mask = ransac.inlier_mask_
outlier_mask = np.logical_not(inlier_mask)
line_X = np.arange(3, 10, 1)
line_y_ransac = ransac.predict(line_X[:, np.newaxis])
plt.scatter(X[inlier_mask], y[inlier_mask], c='steelblue', edgecolor='white',
            marker='o', label='Inliers')
plt.scatter(X[outlier_mask], y[outlier_mask], c='limegreen', edgecolor='white',
            marker='s', label='Outliers')
plt.plot(line_X, line_y_ransac, color='black', lw=2)
plt.xlabel('Average Number of Rooms [RM] ')
plt.ylabel('Price in $1000s [MEDV]')
plt.legend(loc='best')
plt.show()
print('Slope: %.3f' % ransac.estimator_.coef_[0])
print('Intercept: %.3f' % ransac.estimator_.intercept_)

"""# Evaluating the performance of LR models"""

# MULTIPLE REGRESSION
from sklearn.model_selection import train_test_split
X = df.iloc[:, :-1].values
y = df['MEDV'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
                                                    random_state=0)
slr = LinearRegression()
slr.fit(X_train, y_train)
y_train_pred = slr.predict(X_train)
y_test_pred = slr.predict(X_test)

# RESIDUAL PLOTS help to detect nonlinearity and outliers
plt.scatter(y_train_pred, y_train_pred - y_train, c='steelblue', marker='o', 
            edgecolor='white', label='training data')
plt.scatter(y_test_pred, y_test_pred - y_test, c='limegreen', marker='s',
            edgecolor='white', label='test data')
plt.xlabel('Predicted values')
plt.ylabel('Residuals')
plt.legend(loc='best')
plt.hlines(y=0, xmin=-10, xmax=50, color='black', lw=2)
plt.xlim([-10, 50])
plt.show()

# COMPUTING MSE
from sklearn.metrics import mean_squared_error
print('MSE Train: %.3f, test: %.3f' %(mean_squared_error(y_train, y_train_pred),
                                      mean_squared_error(y_test, y_test_pred)))

# COMPUTING R2
from sklearn.metrics import r2_score
print("R^2 train: %.3f, test: %.3f" % (r2_score(y_train, y_train_pred), 
                                       r2_score(y_test, y_test_pred)))

"""# Using Regularized methods for Regression

"""

# RIDGE REGRESSION
from sklearn.linear_model import Ridge
ridge = Ridge(alpha=1.0)

# LASSO REGRESSION
from sklearn.linear_model import Lasso
lasso = Lasso(alpha=1.0)

# ELASTIC NET
from sklearn.linear_model import ElasticNet
elanet = ElasticNet(alpha=1.0, l1_ratio=0.5)
# if we set the l1_ratio to 1.0, elanet would be equal to Lasso

"""# Turning a linear regression model into a curve - polynomial regression"""

# AN EXAMPLE
# First adding a second degree polynomial term
from sklearn.preprocessing import PolynomialFeatures
X = np.array([258.0, 270.0, 294.0, 320.0, 342.0,
              368.0, 396.0, 446.0, 480.0, 586.0])[:, np.newaxis]
y = np.array([236.4, 234.4, 252.8, 298.6, 314.2,
              342.2, 360.8, 368.0, 391.2, 390.8])
lr = LinearRegression()
pr = LinearRegression()
quadratic = PolynomialFeatures(degree=2)
X_quad = quadratic.fit_transform(X)

# Fitting a linear regression model for comparison
lr.fit(X, y)
X_fit = np.arange(250, 600, 10)[:, np.newaxis]
y_lin_fit = lr.predict(X_fit)

# Fitting a multiple regression model on the transformed features for
# polynomial regression
pr.fit(X_quad, y)
y_quad_fit = pr.predict(quadratic.fit_transform(X_fit))

# Plotting the results
plt.scatter(X, y, label='Training Points')
plt.plot(X_fit, y_lin_fit, label='Linear Fit', linestyle='--')
plt.plot(X_fit, y_quad_fit, label='Quadratic Fit')
plt.xlabel('Explanatory Variable')
plt.ylabel('Target Variable')
plt.legend(loc='best')
plt.tight_layout()
plt.show()

# Computing the MSE and R2 evaluation metrics
y_lin_pred = lr.predict(X)
y_quad_pred = pr.predict(X_quad)
print('Training MSE linear: %.3f, quadratic: %.3f' %
      (mean_squared_error(y, y_lin_pred),
      (mean_squared_error(y, y_quad_pred))))
print('Training R2 linear: %.3f, quadratic: %.3f' %
      (r2_score(y, y_lin_pred),
       (r2_score(y, y_quad_pred))))

# NONLINEAR RELATIONSHIP IN HOUSING DATASET
X = df[['LSTAT']].values
y = df['MEDV'].values
regr = LinearRegression()

# Create quadratic features
quadratic = PolynomialFeatures(degree=2)
cubic = PolynomialFeatures(degree=3)
X_quad = quadratic.fit_transform(X)
X_cubic = cubic.fit_transform(X)

# Fit features
X_fit = np.arange(X.min(), X.max(), 1)[:, np.newaxis]

regr = regr.fit(X, y)
y_lin_fit = regr.predict(X_fit)
linear_r2 = r2_score(y, regr.predict(X))

regr = regr.fit(X_quad, y)
y_quad_fit = regr.predict(quadratic.fit_transform(X_fit))
quadratic_r2 = r2_score(y, regr.predict(X_quad))

regr = regr.fit(X_cubic, y)
y_cubic_fit = regr.predict(cubic.fit_transform(X_fit))
cubic_r2 = r2_score(y, regr.predict(X_cubic))

# Plot results
plt.scatter(X, y, label='Training Points', color='lightgray')
plt.plot(X_fit, y_lin_fit, label='Linear (d=1), $R^2=%.2f$' % linear_r2,
         color='blue', lw=2, linestyle=':')
plt.plot(X_fit, y_quad_fit, label='Quadratic (d=2), $R^2=%.2f$' % quadratic_r2,
         color='red', lw=2, linestyle='-')
plt.plot(X_fit, y_cubic_fit, label='Cubic (d=3), $R^2=%.2f$' % cubic_r2,
         color='green', lw=2, linestyle='--')
plt.xlabel('% Lower status of the population [LSTAT]')
plt.ylabel('Price in $1000s [MEDV]')
plt.legend(loc='best')
plt.show()

"""**Alternative:**

A log-transformation of the LSTAT feature and the square root of the MEDV may project the data onto a linear feature space and we can avoid the polynomial regression.
"""

# transform features
X_log = np.log(X)
y_sqrt = np.sqrt(y)

# fit features
X_fit = np.arange(X_log.min() - 1, X_log.max() + 1, 1)[:, np.newaxis]
regr = regr.fit(X_log, y_sqrt)
y_lin_fit = regr.predict(X_fit)
linear_r2 = r2_score(y_sqrt, regr.predict(X_log))

# Plot results
plt.scatter(X_log, y_sqrt, label="Training Points", color='lightgray')
plt.plot(X_fit, y_lin_fit, label='Linear (d=1), $R^2=%.2f$' % linear_r2,
         color='blue', lw=2)
plt.xlabel('log(% lower status of the population)')
plt.ylabel('$\sqrt{Price \; in \; \$1000s \; [MEDV]}$')
plt.legend(loc='best')
plt.tight_layout()
plt.show()

"""## Decision tree regression"""

from sklearn.tree import DecisionTreeRegressor
X = df[['LSTAT']].values
y = df['MEDV'].values
tree = DecisionTreeRegressor(max_depth=3)
tree.fit(X, y)
sort_idx = X.flatten().argsort()
lin_regplot(X[sort_idx], y[sort_idx], tree)
plt.xlabel('LSTAT')
plt.ylabel('MEDV')
plt.show()

"""## Random Forest Regression"""

X = df.iloc[:, :-1].values
y = df['MEDV'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4,
                                                    random_state=1)
from sklearn.ensemble import RandomForestRegressor
forest = RandomForestRegressor(n_estimators=1000, criterion='mse',
                               random_state=1, n_jobs=-1)
forest.fit(X_train, y_train)
y_train_pred = forest.predict(X_train)
y_test_pred = forest.predict(X_test)
print("MSE train: %.3f, test: %.3f" % (mean_squared_error(y_train, y_train_pred),
                                       (mean_squared_error(y_test, y_test_pred))))
print("R^2 train: %.3f, test: %.3f" % (r2_score(y_train, y_train_pred),
                                       r2_score(y_test, y_test_pred)))

